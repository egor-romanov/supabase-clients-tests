// source: SubscriptionsDTO.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Common_pb = require('./Common_pb.js');
goog.object.extend(proto, Common_pb);
goog.exportSymbol('proto.supabase.v1.ListSubscriptionsResponse', null, global);
goog.exportSymbol('proto.supabase.v1.ListSubscriptionsResponse.ListsubscriptionsOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.RealtimeSubscription', null, global);
goog.exportSymbol('proto.supabase.v1.RealtimeSubscriptions', null, global);
goog.exportSymbol('proto.supabase.v1.RemoveSubscriptionData', null, global);
goog.exportSymbol('proto.supabase.v1.RemoveSubscriptionResponse', null, global);
goog.exportSymbol('proto.supabase.v1.RemoveSubscriptionResponse.RemovesubscriptionOneOfCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.RemoveSubscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.RemoveSubscriptionResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.RemoveSubscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.RemoveSubscriptionResponse.displayName = 'proto.supabase.v1.RemoveSubscriptionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.RemoveSubscriptionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.RemoveSubscriptionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.RemoveSubscriptionData.displayName = 'proto.supabase.v1.RemoveSubscriptionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.RealtimeSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.RealtimeSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.RealtimeSubscription.displayName = 'proto.supabase.v1.RealtimeSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.ListSubscriptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.ListSubscriptionsResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.ListSubscriptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.ListSubscriptionsResponse.displayName = 'proto.supabase.v1.ListSubscriptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.RealtimeSubscriptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.supabase.v1.RealtimeSubscriptions.repeatedFields_, null);
};
goog.inherits(proto.supabase.v1.RealtimeSubscriptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.RealtimeSubscriptions.displayName = 'proto.supabase.v1.RealtimeSubscriptions';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.RemoveSubscriptionResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.RemoveSubscriptionResponse.RemovesubscriptionOneOfCase = {
  REMOVESUBSCRIPTION_ONE_OF_NOT_SET: 0,
  DATA: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.RemoveSubscriptionResponse.RemovesubscriptionOneOfCase}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.getRemovesubscriptionOneOfCase = function() {
  return /** @type {proto.supabase.v1.RemoveSubscriptionResponse.RemovesubscriptionOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.RemoveSubscriptionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.RemoveSubscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.RemoveSubscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RemoveSubscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.supabase.v1.RemoveSubscriptionData.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.RemoveSubscriptionResponse}
 */
proto.supabase.v1.RemoveSubscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.RemoveSubscriptionResponse;
  return proto.supabase.v1.RemoveSubscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.RemoveSubscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.RemoveSubscriptionResponse}
 */
proto.supabase.v1.RemoveSubscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.RemoveSubscriptionData;
      reader.readMessage(value,proto.supabase.v1.RemoveSubscriptionData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.RemoveSubscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.RemoveSubscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RemoveSubscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.RemoveSubscriptionData.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemoveSubscriptionData data = 1;
 * @return {?proto.supabase.v1.RemoveSubscriptionData}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.getData = function() {
  return /** @type{?proto.supabase.v1.RemoveSubscriptionData} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.RemoveSubscriptionData, 1));
};


/**
 * @param {?proto.supabase.v1.RemoveSubscriptionData|undefined} value
 * @return {!proto.supabase.v1.RemoveSubscriptionResponse} returns this
*/
proto.supabase.v1.RemoveSubscriptionResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.RemoveSubscriptionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.RemoveSubscriptionResponse} returns this
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.RemoveSubscriptionResponse} returns this
*/
proto.supabase.v1.RemoveSubscriptionResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.RemoveSubscriptionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.RemoveSubscriptionResponse} returns this
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.RemoveSubscriptionResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.RemoveSubscriptionData.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.RemoveSubscriptionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.RemoveSubscriptionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RemoveSubscriptionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    opensubscriptions: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.RemoveSubscriptionData}
 */
proto.supabase.v1.RemoveSubscriptionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.RemoveSubscriptionData;
  return proto.supabase.v1.RemoveSubscriptionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.RemoveSubscriptionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.RemoveSubscriptionData}
 */
proto.supabase.v1.RemoveSubscriptionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpensubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.RemoveSubscriptionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.RemoveSubscriptionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.RemoveSubscriptionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RemoveSubscriptionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpensubscriptions();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 openSubscriptions = 1;
 * @return {number}
 */
proto.supabase.v1.RemoveSubscriptionData.prototype.getOpensubscriptions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.supabase.v1.RemoveSubscriptionData} returns this
 */
proto.supabase.v1.RemoveSubscriptionData.prototype.setOpensubscriptions = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.RealtimeSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.RealtimeSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.RealtimeSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RealtimeSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.RealtimeSubscription}
 */
proto.supabase.v1.RealtimeSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.RealtimeSubscription;
  return proto.supabase.v1.RealtimeSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.RealtimeSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.RealtimeSubscription}
 */
proto.supabase.v1.RealtimeSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.RealtimeSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.RealtimeSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.RealtimeSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RealtimeSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.supabase.v1.RealtimeSubscription.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.RealtimeSubscription} returns this
 */
proto.supabase.v1.RealtimeSubscription.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.ListSubscriptionsResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.ListSubscriptionsResponse.ListsubscriptionsOneOfCase = {
  LISTSUBSCRIPTIONS_ONE_OF_NOT_SET: 0,
  REALTIMESUBSCRIPTIONS: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.ListSubscriptionsResponse.ListsubscriptionsOneOfCase}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.getListsubscriptionsOneOfCase = function() {
  return /** @type {proto.supabase.v1.ListSubscriptionsResponse.ListsubscriptionsOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.ListSubscriptionsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.ListSubscriptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.ListSubscriptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.ListSubscriptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    realtimesubscriptions: (f = msg.getRealtimesubscriptions()) && proto.supabase.v1.RealtimeSubscriptions.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.ListSubscriptionsResponse}
 */
proto.supabase.v1.ListSubscriptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.ListSubscriptionsResponse;
  return proto.supabase.v1.ListSubscriptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.ListSubscriptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.ListSubscriptionsResponse}
 */
proto.supabase.v1.ListSubscriptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.RealtimeSubscriptions;
      reader.readMessage(value,proto.supabase.v1.RealtimeSubscriptions.deserializeBinaryFromReader);
      msg.setRealtimesubscriptions(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.ListSubscriptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.ListSubscriptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.ListSubscriptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRealtimesubscriptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.RealtimeSubscriptions.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional RealtimeSubscriptions realtimeSubscriptions = 1;
 * @return {?proto.supabase.v1.RealtimeSubscriptions}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.getRealtimesubscriptions = function() {
  return /** @type{?proto.supabase.v1.RealtimeSubscriptions} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.RealtimeSubscriptions, 1));
};


/**
 * @param {?proto.supabase.v1.RealtimeSubscriptions|undefined} value
 * @return {!proto.supabase.v1.ListSubscriptionsResponse} returns this
*/
proto.supabase.v1.ListSubscriptionsResponse.prototype.setRealtimesubscriptions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.ListSubscriptionsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.ListSubscriptionsResponse} returns this
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.clearRealtimesubscriptions = function() {
  return this.setRealtimesubscriptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.hasRealtimesubscriptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.ListSubscriptionsResponse} returns this
*/
proto.supabase.v1.ListSubscriptionsResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.ListSubscriptionsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.ListSubscriptionsResponse} returns this
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.ListSubscriptionsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.supabase.v1.RealtimeSubscriptions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.RealtimeSubscriptions.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.RealtimeSubscriptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.RealtimeSubscriptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RealtimeSubscriptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.RealtimeSubscriptions}
 */
proto.supabase.v1.RealtimeSubscriptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.RealtimeSubscriptions;
  return proto.supabase.v1.RealtimeSubscriptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.RealtimeSubscriptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.RealtimeSubscriptions}
 */
proto.supabase.v1.RealtimeSubscriptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.RealtimeSubscriptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.RealtimeSubscriptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.RealtimeSubscriptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RealtimeSubscriptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string id = 1;
 * @return {!Array<string>}
 */
proto.supabase.v1.RealtimeSubscriptions.prototype.getIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.supabase.v1.RealtimeSubscriptions} returns this
 */
proto.supabase.v1.RealtimeSubscriptions.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.supabase.v1.RealtimeSubscriptions} returns this
 */
proto.supabase.v1.RealtimeSubscriptions.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.supabase.v1.RealtimeSubscriptions} returns this
 */
proto.supabase.v1.RealtimeSubscriptions.prototype.clearIdList = function() {
  return this.setIdList([]);
};


goog.object.extend(exports, proto.supabase.v1);
