// source: AuthDTO.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Common_pb = require('./Common_pb.js');
goog.object.extend(proto, Common_pb);
var Enums_pb = require('./Enums_pb.js');
goog.object.extend(proto, Enums_pb);
goog.exportSymbol('proto.supabase.v1.GetSessionFromUrlRequest', null, global);
goog.exportSymbol('proto.supabase.v1.GetSessionFromUrlRequest.Options', null, global);
goog.exportSymbol('proto.supabase.v1.GetSessionFromUrlResponse', null, global);
goog.exportSymbol('proto.supabase.v1.GetSessionFromUrlResponse.GetsessionfromurlOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.RefreshSessionResponse', null, global);
goog.exportSymbol('proto.supabase.v1.RefreshSessionResponse.RefreshsessionOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.Session', null, global);
goog.exportSymbol('proto.supabase.v1.SessionResponse', null, global);
goog.exportSymbol('proto.supabase.v1.SetAuthRequest', null, global);
goog.exportSymbol('proto.supabase.v1.SetAuthResponse', null, global);
goog.exportSymbol('proto.supabase.v1.SetAuthResponse.SetauthOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.SetSessionRequest', null, global);
goog.exportSymbol('proto.supabase.v1.SetSessionResponse', null, global);
goog.exportSymbol('proto.supabase.v1.SetSessionResponse.SetsessionOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.SignIn', null, global);
goog.exportSymbol('proto.supabase.v1.SignInRequest', null, global);
goog.exportSymbol('proto.supabase.v1.SignInResponse', null, global);
goog.exportSymbol('proto.supabase.v1.SignInResponse.SigninOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.SignUpOptions', null, global);
goog.exportSymbol('proto.supabase.v1.SignUpRequest', null, global);
goog.exportSymbol('proto.supabase.v1.SignUpResponse', null, global);
goog.exportSymbol('proto.supabase.v1.SignUpResponse.SignupOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.SubscriveAuthData', null, global);
goog.exportSymbol('proto.supabase.v1.SubscriveAuthResponse', null, global);
goog.exportSymbol('proto.supabase.v1.SubscriveAuthResponse.SubscriveauthOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.UpdateRequest', null, global);
goog.exportSymbol('proto.supabase.v1.UpdateResponse', null, global);
goog.exportSymbol('proto.supabase.v1.UpdateResponse.SignupOneOfCase', null, global);
goog.exportSymbol('proto.supabase.v1.User', null, global);
goog.exportSymbol('proto.supabase.v1.User.AppMetadata', null, global);
goog.exportSymbol('proto.supabase.v1.User.UserMetadata', null, global);
goog.exportSymbol('proto.supabase.v1.UserAttributes', null, global);
goog.exportSymbol('proto.supabase.v1.UserCredentials', null, global);
goog.exportSymbol('proto.supabase.v1.UserIdentity', null, global);
goog.exportSymbol('proto.supabase.v1.UserResponse', null, global);
goog.exportSymbol('proto.supabase.v1.UserSession', null, global);
goog.exportSymbol('proto.supabase.v1.VerifyOTPParams', null, global);
goog.exportSymbol('proto.supabase.v1.VerifyOTPRequest', null, global);
goog.exportSymbol('proto.supabase.v1.VerifyOTPRequest.Options', null, global);
goog.exportSymbol('proto.supabase.v1.VerifyOTPResponse', null, global);
goog.exportSymbol('proto.supabase.v1.VerifyOTPResponse.VerifyotpOneOfCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SignUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SignUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SignUpRequest.displayName = 'proto.supabase.v1.SignUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UserCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.UserCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UserCredentials.displayName = 'proto.supabase.v1.UserCredentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SignUpOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SignUpOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SignUpOptions.displayName = 'proto.supabase.v1.SignUpOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SignUpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.SignUpResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.SignUpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SignUpResponse.displayName = 'proto.supabase.v1.SignUpResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UserSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.UserSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UserSession.displayName = 'proto.supabase.v1.UserSession';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.supabase.v1.User.repeatedFields_, null);
};
goog.inherits(proto.supabase.v1.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.User.displayName = 'proto.supabase.v1.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.User.AppMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.User.AppMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.User.AppMetadata.displayName = 'proto.supabase.v1.User.AppMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.User.UserMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.User.UserMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.User.UserMetadata.displayName = 'proto.supabase.v1.User.UserMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UserIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.UserIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UserIdentity.displayName = 'proto.supabase.v1.UserIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.Session.displayName = 'proto.supabase.v1.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SignInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SignInRequest.displayName = 'proto.supabase.v1.SignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SignInResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.SignInResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.SignInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SignInResponse.displayName = 'proto.supabase.v1.SignInResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SignIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SignIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SignIn.displayName = 'proto.supabase.v1.SignIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.VerifyOTPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.VerifyOTPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.VerifyOTPRequest.displayName = 'proto.supabase.v1.VerifyOTPRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.VerifyOTPRequest.Options = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.VerifyOTPRequest.Options, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.VerifyOTPRequest.Options.displayName = 'proto.supabase.v1.VerifyOTPRequest.Options';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.VerifyOTPParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.VerifyOTPParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.VerifyOTPParams.displayName = 'proto.supabase.v1.VerifyOTPParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.VerifyOTPResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.VerifyOTPResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.VerifyOTPResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.VerifyOTPResponse.displayName = 'proto.supabase.v1.VerifyOTPResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.UserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UserResponse.displayName = 'proto.supabase.v1.UserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SessionResponse.displayName = 'proto.supabase.v1.SessionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.RefreshSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.RefreshSessionResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.RefreshSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.RefreshSessionResponse.displayName = 'proto.supabase.v1.RefreshSessionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UpdateRequest.displayName = 'proto.supabase.v1.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UserAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.UserAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UserAttributes.displayName = 'proto.supabase.v1.UserAttributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.UpdateResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.UpdateResponse.displayName = 'proto.supabase.v1.UpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SetSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SetSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SetSessionRequest.displayName = 'proto.supabase.v1.SetSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SetSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.SetSessionResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.SetSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SetSessionResponse.displayName = 'proto.supabase.v1.SetSessionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SetAuthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SetAuthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SetAuthRequest.displayName = 'proto.supabase.v1.SetAuthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SetAuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.SetAuthResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.SetAuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SetAuthResponse.displayName = 'proto.supabase.v1.SetAuthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.GetSessionFromUrlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.GetSessionFromUrlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.GetSessionFromUrlRequest.displayName = 'proto.supabase.v1.GetSessionFromUrlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.GetSessionFromUrlRequest.Options, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.GetSessionFromUrlRequest.Options.displayName = 'proto.supabase.v1.GetSessionFromUrlRequest.Options';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.GetSessionFromUrlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.GetSessionFromUrlResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.GetSessionFromUrlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.GetSessionFromUrlResponse.displayName = 'proto.supabase.v1.GetSessionFromUrlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SubscriveAuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supabase.v1.SubscriveAuthResponse.oneofGroups_);
};
goog.inherits(proto.supabase.v1.SubscriveAuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SubscriveAuthResponse.displayName = 'proto.supabase.v1.SubscriveAuthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supabase.v1.SubscriveAuthData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supabase.v1.SubscriveAuthData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supabase.v1.SubscriveAuthData.displayName = 'proto.supabase.v1.SubscriveAuthData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SignUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SignUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SignUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercredentials: (f = msg.getUsercredentials()) && proto.supabase.v1.UserCredentials.toObject(includeInstance, f),
    options: (f = msg.getOptions()) && proto.supabase.v1.SignUpOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SignUpRequest}
 */
proto.supabase.v1.SignUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SignUpRequest;
  return proto.supabase.v1.SignUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SignUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SignUpRequest}
 */
proto.supabase.v1.SignUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserCredentials;
      reader.readMessage(value,proto.supabase.v1.UserCredentials.deserializeBinaryFromReader);
      msg.setUsercredentials(value);
      break;
    case 2:
      var value = new proto.supabase.v1.SignUpOptions;
      reader.readMessage(value,proto.supabase.v1.SignUpOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SignUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SignUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SignUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsercredentials();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserCredentials.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.supabase.v1.SignUpOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserCredentials userCredentials = 1;
 * @return {?proto.supabase.v1.UserCredentials}
 */
proto.supabase.v1.SignUpRequest.prototype.getUsercredentials = function() {
  return /** @type{?proto.supabase.v1.UserCredentials} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserCredentials, 1));
};


/**
 * @param {?proto.supabase.v1.UserCredentials|undefined} value
 * @return {!proto.supabase.v1.SignUpRequest} returns this
*/
proto.supabase.v1.SignUpRequest.prototype.setUsercredentials = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignUpRequest} returns this
 */
proto.supabase.v1.SignUpRequest.prototype.clearUsercredentials = function() {
  return this.setUsercredentials(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignUpRequest.prototype.hasUsercredentials = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignUpOptions options = 2;
 * @return {?proto.supabase.v1.SignUpOptions}
 */
proto.supabase.v1.SignUpRequest.prototype.getOptions = function() {
  return /** @type{?proto.supabase.v1.SignUpOptions} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.SignUpOptions, 2));
};


/**
 * @param {?proto.supabase.v1.SignUpOptions|undefined} value
 * @return {!proto.supabase.v1.SignUpRequest} returns this
*/
proto.supabase.v1.SignUpRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignUpRequest} returns this
 */
proto.supabase.v1.SignUpRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignUpRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UserCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UserCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UserCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UserCredentials}
 */
proto.supabase.v1.UserCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UserCredentials;
  return proto.supabase.v1.UserCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UserCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UserCredentials}
 */
proto.supabase.v1.UserCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    case 5:
      var value = /** @type {!proto.supabase.v1.PROVIDER} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UserCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UserCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UserCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.supabase.v1.UserCredentials.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserCredentials} returns this
 */
proto.supabase.v1.UserCredentials.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string phone = 2;
 * @return {string}
 */
proto.supabase.v1.UserCredentials.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserCredentials} returns this
 */
proto.supabase.v1.UserCredentials.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.supabase.v1.UserCredentials.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserCredentials} returns this
 */
proto.supabase.v1.UserCredentials.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string refreshToken = 4;
 * @return {string}
 */
proto.supabase.v1.UserCredentials.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserCredentials} returns this
 */
proto.supabase.v1.UserCredentials.prototype.setRefreshtoken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional PROVIDER provider = 5;
 * @return {!proto.supabase.v1.PROVIDER}
 */
proto.supabase.v1.UserCredentials.prototype.getProvider = function() {
  return /** @type {!proto.supabase.v1.PROVIDER} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.supabase.v1.PROVIDER} value
 * @return {!proto.supabase.v1.UserCredentials} returns this
 */
proto.supabase.v1.UserCredentials.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SignUpOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SignUpOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SignUpOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignUpOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirectto: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SignUpOptions}
 */
proto.supabase.v1.SignUpOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SignUpOptions;
  return proto.supabase.v1.SignUpOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SignUpOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SignUpOptions}
 */
proto.supabase.v1.SignUpOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectto(value);
      break;
    case 2:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SignUpOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SignUpOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SignUpOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignUpOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirectto();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string redirectTo = 1;
 * @return {string}
 */
proto.supabase.v1.SignUpOptions.prototype.getRedirectto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.SignUpOptions} returns this
 */
proto.supabase.v1.SignUpOptions.prototype.setRedirectto = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> data = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.supabase.v1.SignUpOptions.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.supabase.v1.SignUpOptions} returns this
 */
proto.supabase.v1.SignUpOptions.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.SignUpResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.SignUpResponse.SignupOneOfCase = {
  SIGNUP_ONE_OF_NOT_SET: 0,
  SIGNUP: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.SignUpResponse.SignupOneOfCase}
 */
proto.supabase.v1.SignUpResponse.prototype.getSignupOneOfCase = function() {
  return /** @type {proto.supabase.v1.SignUpResponse.SignupOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.SignUpResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SignUpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SignUpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SignUpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignUpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signup: (f = msg.getSignup()) && proto.supabase.v1.UserSession.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SignUpResponse}
 */
proto.supabase.v1.SignUpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SignUpResponse;
  return proto.supabase.v1.SignUpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SignUpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SignUpResponse}
 */
proto.supabase.v1.SignUpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserSession;
      reader.readMessage(value,proto.supabase.v1.UserSession.deserializeBinaryFromReader);
      msg.setSignup(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SignUpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SignUpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SignUpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignUpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserSession.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserSession signUp = 1;
 * @return {?proto.supabase.v1.UserSession}
 */
proto.supabase.v1.SignUpResponse.prototype.getSignup = function() {
  return /** @type{?proto.supabase.v1.UserSession} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserSession, 1));
};


/**
 * @param {?proto.supabase.v1.UserSession|undefined} value
 * @return {!proto.supabase.v1.SignUpResponse} returns this
*/
proto.supabase.v1.SignUpResponse.prototype.setSignup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.SignUpResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignUpResponse} returns this
 */
proto.supabase.v1.SignUpResponse.prototype.clearSignup = function() {
  return this.setSignup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignUpResponse.prototype.hasSignup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.SignUpResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.SignUpResponse} returns this
*/
proto.supabase.v1.SignUpResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.SignUpResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignUpResponse} returns this
 */
proto.supabase.v1.SignUpResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignUpResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UserSession.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UserSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UserSession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.supabase.v1.User.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UserSession}
 */
proto.supabase.v1.UserSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UserSession;
  return proto.supabase.v1.UserSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UserSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UserSession}
 */
proto.supabase.v1.UserSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.User;
      reader.readMessage(value,proto.supabase.v1.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UserSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UserSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UserSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.User.serializeBinaryToWriter
    );
  }
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.supabase.v1.User}
 */
proto.supabase.v1.UserSession.prototype.getUser = function() {
  return /** @type{?proto.supabase.v1.User} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.User, 1));
};


/**
 * @param {?proto.supabase.v1.User|undefined} value
 * @return {!proto.supabase.v1.UserSession} returns this
*/
proto.supabase.v1.UserSession.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.UserSession} returns this
 */
proto.supabase.v1.UserSession.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.UserSession.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.UserSession.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 2));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.UserSession} returns this
*/
proto.supabase.v1.UserSession.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.UserSession} returns this
 */
proto.supabase.v1.UserSession.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.UserSession.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.supabase.v1.User.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.User.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    aud: jspb.Message.getFieldWithDefault(msg, 2, ""),
    confirmationSentAt: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recoverySentAt: jspb.Message.getFieldWithDefault(msg, 4, ""),
    invitedAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    actionLink: jspb.Message.getFieldWithDefault(msg, 6, ""),
    email: jspb.Message.getFieldWithDefault(msg, 7, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 9, ""),
    confirmedAt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    emailConfirmedAt: jspb.Message.getFieldWithDefault(msg, 11, ""),
    phoneConfirmedAt: jspb.Message.getFieldWithDefault(msg, 12, ""),
    lastSignInAt: jspb.Message.getFieldWithDefault(msg, 13, ""),
    role: jspb.Message.getFieldWithDefault(msg, 14, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 15, ""),
    identitiesList: jspb.Message.toObjectList(msg.getIdentitiesList(),
    proto.supabase.v1.UserIdentity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.User}
 */
proto.supabase.v1.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.User;
  return proto.supabase.v1.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.User}
 */
proto.supabase.v1.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAud(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmationSentAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecoverySentAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionLink(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmedAt(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailConfirmedAt(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneConfirmedAt(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastSignInAt(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    case 16:
      var value = new proto.supabase.v1.UserIdentity;
      reader.readMessage(value,proto.supabase.v1.UserIdentity.deserializeBinaryFromReader);
      msg.addIdentities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAud();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfirmationSentAt();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecoverySentAt();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInvitedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActionLink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getConfirmedAt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEmailConfirmedAt();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPhoneConfirmedAt();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLastSignInAt();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getIdentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.supabase.v1.UserIdentity.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.User.AppMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.User.AppMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.User.AppMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.User.AppMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.User.AppMetadata}
 */
proto.supabase.v1.User.AppMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.User.AppMetadata;
  return proto.supabase.v1.User.AppMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.User.AppMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.User.AppMetadata}
 */
proto.supabase.v1.User.AppMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 2:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.User.AppMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.User.AppMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.User.AppMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.User.AppMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.supabase.v1.User.AppMetadata.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User.AppMetadata} returns this
 */
proto.supabase.v1.User.AppMetadata.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> data = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.supabase.v1.User.AppMetadata.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.supabase.v1.User.AppMetadata} returns this
 */
proto.supabase.v1.User.AppMetadata.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.User.UserMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.User.UserMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.User.UserMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.User.UserMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.User.UserMetadata}
 */
proto.supabase.v1.User.UserMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.User.UserMetadata;
  return proto.supabase.v1.User.UserMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.User.UserMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.User.UserMetadata}
 */
proto.supabase.v1.User.UserMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.User.UserMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.User.UserMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.User.UserMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.User.UserMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.supabase.v1.User.UserMetadata.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.supabase.v1.User.UserMetadata} returns this
 */
proto.supabase.v1.User.UserMetadata.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string aud = 2;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getAud = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setAud = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirmation_sent_at = 3;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getConfirmationSentAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setConfirmationSentAt = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string recovery_sent_at = 4;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getRecoverySentAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setRecoverySentAt = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string invited_at = 5;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getInvitedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setInvitedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string action_link = 6;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getActionLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setActionLink = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string email = 7;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string phone = 8;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string created_at = 9;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string confirmed_at = 10;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getConfirmedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setConfirmedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string email_confirmed_at = 11;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getEmailConfirmedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setEmailConfirmedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string phone_confirmed_at = 12;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getPhoneConfirmedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setPhoneConfirmedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string last_sign_in_at = 13;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getLastSignInAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setLastSignInAt = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string role = 14;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setRole = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string updated_at = 15;
 * @return {string}
 */
proto.supabase.v1.User.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * repeated UserIdentity identities = 16;
 * @return {!Array<!proto.supabase.v1.UserIdentity>}
 */
proto.supabase.v1.User.prototype.getIdentitiesList = function() {
  return /** @type{!Array<!proto.supabase.v1.UserIdentity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.supabase.v1.UserIdentity, 16));
};


/**
 * @param {!Array<!proto.supabase.v1.UserIdentity>} value
 * @return {!proto.supabase.v1.User} returns this
*/
proto.supabase.v1.User.prototype.setIdentitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.supabase.v1.UserIdentity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.supabase.v1.UserIdentity}
 */
proto.supabase.v1.User.prototype.addIdentities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.supabase.v1.UserIdentity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.supabase.v1.User} returns this
 */
proto.supabase.v1.User.prototype.clearIdentitiesList = function() {
  return this.setIdentitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UserIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UserIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UserIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    identityDataMap: (f = msg.getIdentityDataMap()) ? f.toObject(includeInstance, undefined) : [],
    provider: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lastSignInAt: jspb.Message.getFieldWithDefault(msg, 6, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UserIdentity}
 */
proto.supabase.v1.UserIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UserIdentity;
  return proto.supabase.v1.UserIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UserIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UserIdentity}
 */
proto.supabase.v1.UserIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = msg.getIdentityDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastSignInAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UserIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UserIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UserIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdentityDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLastSignInAt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.supabase.v1.UserIdentity.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.supabase.v1.UserIdentity.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> identity_data = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.supabase.v1.UserIdentity.prototype.getIdentityDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.clearIdentityDataMap = function() {
  this.getIdentityDataMap().clear();
  return this;};


/**
 * optional string provider = 4;
 * @return {string}
 */
proto.supabase.v1.UserIdentity.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.supabase.v1.UserIdentity.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string last_sign_in_at = 6;
 * @return {string}
 */
proto.supabase.v1.UserIdentity.prototype.getLastSignInAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.setLastSignInAt = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string updated_at = 7;
 * @return {string}
 */
proto.supabase.v1.UserIdentity.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserIdentity} returns this
 */
proto.supabase.v1.UserIdentity.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expiresIn: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expiresAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    refreshToken: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tokenType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    user: (f = msg.getUser()) && proto.supabase.v1.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.Session}
 */
proto.supabase.v1.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.Session;
  return proto.supabase.v1.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.Session}
 */
proto.supabase.v1.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiresIn(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiresAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshToken(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenType(value);
      break;
    case 7:
      var value = new proto.supabase.v1.User;
      reader.readMessage(value,proto.supabase.v1.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProviderToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpiresIn();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getExpiresAt();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTokenType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.supabase.v1.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string provider_token = 1;
 * @return {string}
 */
proto.supabase.v1.Session.prototype.getProviderToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.setProviderToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string access_token = 2;
 * @return {string}
 */
proto.supabase.v1.Session.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 expires_in = 3;
 * @return {number}
 */
proto.supabase.v1.Session.prototype.getExpiresIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.setExpiresIn = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 expires_at = 4;
 * @return {number}
 */
proto.supabase.v1.Session.prototype.getExpiresAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.setExpiresAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string refresh_token = 5;
 * @return {string}
 */
proto.supabase.v1.Session.prototype.getRefreshToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.setRefreshToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string token_type = 6;
 * @return {string}
 */
proto.supabase.v1.Session.prototype.getTokenType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.setTokenType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional User user = 7;
 * @return {?proto.supabase.v1.User}
 */
proto.supabase.v1.Session.prototype.getUser = function() {
  return /** @type{?proto.supabase.v1.User} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.User, 7));
};


/**
 * @param {?proto.supabase.v1.User|undefined} value
 * @return {!proto.supabase.v1.Session} returns this
*/
proto.supabase.v1.Session.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.Session} returns this
 */
proto.supabase.v1.Session.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.Session.prototype.hasUser = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SignInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SignInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SignInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercredentials: (f = msg.getUsercredentials()) && proto.supabase.v1.UserCredentials.toObject(includeInstance, f),
    options: (f = msg.getOptions()) && proto.supabase.v1.SignUpOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SignInRequest}
 */
proto.supabase.v1.SignInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SignInRequest;
  return proto.supabase.v1.SignInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SignInRequest}
 */
proto.supabase.v1.SignInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserCredentials;
      reader.readMessage(value,proto.supabase.v1.UserCredentials.deserializeBinaryFromReader);
      msg.setUsercredentials(value);
      break;
    case 2:
      var value = new proto.supabase.v1.SignUpOptions;
      reader.readMessage(value,proto.supabase.v1.SignUpOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SignInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsercredentials();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserCredentials.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.supabase.v1.SignUpOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserCredentials userCredentials = 1;
 * @return {?proto.supabase.v1.UserCredentials}
 */
proto.supabase.v1.SignInRequest.prototype.getUsercredentials = function() {
  return /** @type{?proto.supabase.v1.UserCredentials} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserCredentials, 1));
};


/**
 * @param {?proto.supabase.v1.UserCredentials|undefined} value
 * @return {!proto.supabase.v1.SignInRequest} returns this
*/
proto.supabase.v1.SignInRequest.prototype.setUsercredentials = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignInRequest} returns this
 */
proto.supabase.v1.SignInRequest.prototype.clearUsercredentials = function() {
  return this.setUsercredentials(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignInRequest.prototype.hasUsercredentials = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignUpOptions options = 2;
 * @return {?proto.supabase.v1.SignUpOptions}
 */
proto.supabase.v1.SignInRequest.prototype.getOptions = function() {
  return /** @type{?proto.supabase.v1.SignUpOptions} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.SignUpOptions, 2));
};


/**
 * @param {?proto.supabase.v1.SignUpOptions|undefined} value
 * @return {!proto.supabase.v1.SignInRequest} returns this
*/
proto.supabase.v1.SignInRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignInRequest} returns this
 */
proto.supabase.v1.SignInRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignInRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.SignInResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.SignInResponse.SigninOneOfCase = {
  SIGNIN_ONE_OF_NOT_SET: 0,
  SIGNIN: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.SignInResponse.SigninOneOfCase}
 */
proto.supabase.v1.SignInResponse.prototype.getSigninOneOfCase = function() {
  return /** @type {proto.supabase.v1.SignInResponse.SigninOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.SignInResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SignInResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SignInResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SignInResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignInResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signin: (f = msg.getSignin()) && proto.supabase.v1.SignIn.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SignInResponse}
 */
proto.supabase.v1.SignInResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SignInResponse;
  return proto.supabase.v1.SignInResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SignInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SignInResponse}
 */
proto.supabase.v1.SignInResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.SignIn;
      reader.readMessage(value,proto.supabase.v1.SignIn.deserializeBinaryFromReader);
      msg.setSignin(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SignInResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SignInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SignInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignInResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.SignIn.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignIn signIn = 1;
 * @return {?proto.supabase.v1.SignIn}
 */
proto.supabase.v1.SignInResponse.prototype.getSignin = function() {
  return /** @type{?proto.supabase.v1.SignIn} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.SignIn, 1));
};


/**
 * @param {?proto.supabase.v1.SignIn|undefined} value
 * @return {!proto.supabase.v1.SignInResponse} returns this
*/
proto.supabase.v1.SignInResponse.prototype.setSignin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.SignInResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignInResponse} returns this
 */
proto.supabase.v1.SignInResponse.prototype.clearSignin = function() {
  return this.setSignin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignInResponse.prototype.hasSignin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.SignInResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.SignInResponse} returns this
*/
proto.supabase.v1.SignInResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.SignInResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignInResponse} returns this
 */
proto.supabase.v1.SignInResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignInResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SignIn.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SignIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SignIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, 0),
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.supabase.v1.User.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SignIn}
 */
proto.supabase.v1.SignIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SignIn;
  return proto.supabase.v1.SignIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SignIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SignIn}
 */
proto.supabase.v1.SignIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.supabase.v1.PROVIDER} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 2:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new proto.supabase.v1.User;
      reader.readMessage(value,proto.supabase.v1.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SignIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SignIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SignIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SignIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.supabase.v1.User.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional PROVIDER provider = 1;
 * @return {!proto.supabase.v1.PROVIDER}
 */
proto.supabase.v1.SignIn.prototype.getProvider = function() {
  return /** @type {!proto.supabase.v1.PROVIDER} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.supabase.v1.PROVIDER} value
 * @return {!proto.supabase.v1.SignIn} returns this
 */
proto.supabase.v1.SignIn.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Session session = 2;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.SignIn.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 2));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.SignIn} returns this
*/
proto.supabase.v1.SignIn.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignIn} returns this
 */
proto.supabase.v1.SignIn.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignIn.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional User user = 3;
 * @return {?proto.supabase.v1.User}
 */
proto.supabase.v1.SignIn.prototype.getUser = function() {
  return /** @type{?proto.supabase.v1.User} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.User, 3));
};


/**
 * @param {?proto.supabase.v1.User|undefined} value
 * @return {!proto.supabase.v1.SignIn} returns this
*/
proto.supabase.v1.SignIn.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SignIn} returns this
 */
proto.supabase.v1.SignIn.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SignIn.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.supabase.v1.SignIn.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.SignIn} returns this
 */
proto.supabase.v1.SignIn.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.VerifyOTPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.VerifyOTPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.VerifyOTPRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.supabase.v1.VerifyOTPParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.VerifyOTPRequest}
 */
proto.supabase.v1.VerifyOTPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.VerifyOTPRequest;
  return proto.supabase.v1.VerifyOTPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.VerifyOTPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.VerifyOTPRequest}
 */
proto.supabase.v1.VerifyOTPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.VerifyOTPParams;
      reader.readMessage(value,proto.supabase.v1.VerifyOTPParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.VerifyOTPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.VerifyOTPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.VerifyOTPRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.VerifyOTPParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.VerifyOTPRequest.Options.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.VerifyOTPRequest.Options.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.VerifyOTPRequest.Options} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPRequest.Options.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirectto: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.VerifyOTPRequest.Options}
 */
proto.supabase.v1.VerifyOTPRequest.Options.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.VerifyOTPRequest.Options;
  return proto.supabase.v1.VerifyOTPRequest.Options.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.VerifyOTPRequest.Options} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.VerifyOTPRequest.Options}
 */
proto.supabase.v1.VerifyOTPRequest.Options.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.VerifyOTPRequest.Options.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.VerifyOTPRequest.Options.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.VerifyOTPRequest.Options} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPRequest.Options.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirectto();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string redirectTo = 1;
 * @return {string}
 */
proto.supabase.v1.VerifyOTPRequest.Options.prototype.getRedirectto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.VerifyOTPRequest.Options} returns this
 */
proto.supabase.v1.VerifyOTPRequest.Options.prototype.setRedirectto = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional VerifyOTPParams params = 1;
 * @return {?proto.supabase.v1.VerifyOTPParams}
 */
proto.supabase.v1.VerifyOTPRequest.prototype.getParams = function() {
  return /** @type{?proto.supabase.v1.VerifyOTPParams} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.VerifyOTPParams, 1));
};


/**
 * @param {?proto.supabase.v1.VerifyOTPParams|undefined} value
 * @return {!proto.supabase.v1.VerifyOTPRequest} returns this
*/
proto.supabase.v1.VerifyOTPRequest.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.VerifyOTPRequest} returns this
 */
proto.supabase.v1.VerifyOTPRequest.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.VerifyOTPRequest.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.VerifyOTPParams.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.VerifyOTPParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.VerifyOTPParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.VerifyOTPParams}
 */
proto.supabase.v1.VerifyOTPParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.VerifyOTPParams;
  return proto.supabase.v1.VerifyOTPParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.VerifyOTPParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.VerifyOTPParams}
 */
proto.supabase.v1.VerifyOTPParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.VerifyOTPParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.VerifyOTPParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.VerifyOTPParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string phone = 1;
 * @return {string}
 */
proto.supabase.v1.VerifyOTPParams.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.VerifyOTPParams} returns this
 */
proto.supabase.v1.VerifyOTPParams.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.supabase.v1.VerifyOTPParams.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.VerifyOTPParams} returns this
 */
proto.supabase.v1.VerifyOTPParams.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.VerifyOTPResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.VerifyOTPResponse.VerifyotpOneOfCase = {
  VERIFYOTP_ONE_OF_NOT_SET: 0,
  DATA: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.VerifyOTPResponse.VerifyotpOneOfCase}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.getVerifyotpOneOfCase = function() {
  return /** @type {proto.supabase.v1.VerifyOTPResponse.VerifyotpOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.VerifyOTPResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.VerifyOTPResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.VerifyOTPResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.supabase.v1.UserSession.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.VerifyOTPResponse}
 */
proto.supabase.v1.VerifyOTPResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.VerifyOTPResponse;
  return proto.supabase.v1.VerifyOTPResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.VerifyOTPResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.VerifyOTPResponse}
 */
proto.supabase.v1.VerifyOTPResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserSession;
      reader.readMessage(value,proto.supabase.v1.UserSession.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.VerifyOTPResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.VerifyOTPResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.VerifyOTPResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserSession.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserSession data = 1;
 * @return {?proto.supabase.v1.UserSession}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.getData = function() {
  return /** @type{?proto.supabase.v1.UserSession} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserSession, 1));
};


/**
 * @param {?proto.supabase.v1.UserSession|undefined} value
 * @return {!proto.supabase.v1.VerifyOTPResponse} returns this
*/
proto.supabase.v1.VerifyOTPResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.VerifyOTPResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.VerifyOTPResponse} returns this
 */
proto.supabase.v1.VerifyOTPResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.VerifyOTPResponse} returns this
*/
proto.supabase.v1.VerifyOTPResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.VerifyOTPResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.VerifyOTPResponse} returns this
 */
proto.supabase.v1.VerifyOTPResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.VerifyOTPResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.supabase.v1.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UserResponse}
 */
proto.supabase.v1.UserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UserResponse;
  return proto.supabase.v1.UserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UserResponse}
 */
proto.supabase.v1.UserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.User;
      reader.readMessage(value,proto.supabase.v1.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.supabase.v1.User}
 */
proto.supabase.v1.UserResponse.prototype.getUser = function() {
  return /** @type{?proto.supabase.v1.User} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.User, 1));
};


/**
 * @param {?proto.supabase.v1.User|undefined} value
 * @return {!proto.supabase.v1.UserResponse} returns this
*/
proto.supabase.v1.UserResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.UserResponse} returns this
 */
proto.supabase.v1.UserResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.UserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SessionResponse}
 */
proto.supabase.v1.SessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SessionResponse;
  return proto.supabase.v1.SessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SessionResponse}
 */
proto.supabase.v1.SessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.SessionResponse.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 1));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.SessionResponse} returns this
*/
proto.supabase.v1.SessionResponse.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SessionResponse} returns this
 */
proto.supabase.v1.SessionResponse.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SessionResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.RefreshSessionResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.RefreshSessionResponse.RefreshsessionOneOfCase = {
  REFRESHSESSION_ONE_OF_NOT_SET: 0,
  DATA: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.RefreshSessionResponse.RefreshsessionOneOfCase}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.getRefreshsessionOneOfCase = function() {
  return /** @type {proto.supabase.v1.RefreshSessionResponse.RefreshsessionOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.RefreshSessionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.RefreshSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.RefreshSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RefreshSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.supabase.v1.UserSession.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.RefreshSessionResponse}
 */
proto.supabase.v1.RefreshSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.RefreshSessionResponse;
  return proto.supabase.v1.RefreshSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.RefreshSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.RefreshSessionResponse}
 */
proto.supabase.v1.RefreshSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserSession;
      reader.readMessage(value,proto.supabase.v1.UserSession.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.RefreshSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.RefreshSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.RefreshSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserSession.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserSession data = 1;
 * @return {?proto.supabase.v1.UserSession}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.getData = function() {
  return /** @type{?proto.supabase.v1.UserSession} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserSession, 1));
};


/**
 * @param {?proto.supabase.v1.UserSession|undefined} value
 * @return {!proto.supabase.v1.RefreshSessionResponse} returns this
*/
proto.supabase.v1.RefreshSessionResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.RefreshSessionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.RefreshSessionResponse} returns this
 */
proto.supabase.v1.RefreshSessionResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.RefreshSessionResponse} returns this
*/
proto.supabase.v1.RefreshSessionResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.RefreshSessionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.RefreshSessionResponse} returns this
 */
proto.supabase.v1.RefreshSessionResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.RefreshSessionResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributes: (f = msg.getAttributes()) && proto.supabase.v1.UserAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UpdateRequest}
 */
proto.supabase.v1.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UpdateRequest;
  return proto.supabase.v1.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UpdateRequest}
 */
proto.supabase.v1.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserAttributes;
      reader.readMessage(value,proto.supabase.v1.UserAttributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserAttributes attributes = 1;
 * @return {?proto.supabase.v1.UserAttributes}
 */
proto.supabase.v1.UpdateRequest.prototype.getAttributes = function() {
  return /** @type{?proto.supabase.v1.UserAttributes} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserAttributes, 1));
};


/**
 * @param {?proto.supabase.v1.UserAttributes|undefined} value
 * @return {!proto.supabase.v1.UpdateRequest} returns this
*/
proto.supabase.v1.UpdateRequest.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.UpdateRequest} returns this
 */
proto.supabase.v1.UpdateRequest.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.UpdateRequest.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UserAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UserAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UserAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    emailChangeToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UserAttributes}
 */
proto.supabase.v1.UserAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UserAttributes;
  return proto.supabase.v1.UserAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UserAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UserAttributes}
 */
proto.supabase.v1.UserAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailChangeToken(value);
      break;
    case 4:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UserAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UserAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UserAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UserAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmailChangeToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.supabase.v1.UserAttributes.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserAttributes} returns this
 */
proto.supabase.v1.UserAttributes.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.supabase.v1.UserAttributes.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserAttributes} returns this
 */
proto.supabase.v1.UserAttributes.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email_change_token = 3;
 * @return {string}
 */
proto.supabase.v1.UserAttributes.prototype.getEmailChangeToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.UserAttributes} returns this
 */
proto.supabase.v1.UserAttributes.prototype.setEmailChangeToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, string> data = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.supabase.v1.UserAttributes.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.supabase.v1.UserAttributes} returns this
 */
proto.supabase.v1.UserAttributes.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.UpdateResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.UpdateResponse.SignupOneOfCase = {
  SIGNUP_ONE_OF_NOT_SET: 0,
  DATA: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.UpdateResponse.SignupOneOfCase}
 */
proto.supabase.v1.UpdateResponse.prototype.getSignupOneOfCase = function() {
  return /** @type {proto.supabase.v1.UpdateResponse.SignupOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.UpdateResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.supabase.v1.UserSession.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.UpdateResponse}
 */
proto.supabase.v1.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.UpdateResponse;
  return proto.supabase.v1.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.UpdateResponse}
 */
proto.supabase.v1.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.UserSession;
      reader.readMessage(value,proto.supabase.v1.UserSession.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.UpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.UserSession.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserSession data = 1;
 * @return {?proto.supabase.v1.UserSession}
 */
proto.supabase.v1.UpdateResponse.prototype.getData = function() {
  return /** @type{?proto.supabase.v1.UserSession} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.UserSession, 1));
};


/**
 * @param {?proto.supabase.v1.UserSession|undefined} value
 * @return {!proto.supabase.v1.UpdateResponse} returns this
*/
proto.supabase.v1.UpdateResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.UpdateResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.UpdateResponse} returns this
 */
proto.supabase.v1.UpdateResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.UpdateResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.UpdateResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.UpdateResponse} returns this
*/
proto.supabase.v1.UpdateResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.UpdateResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.UpdateResponse} returns this
 */
proto.supabase.v1.UpdateResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.UpdateResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SetSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SetSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SetSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SetSessionRequest}
 */
proto.supabase.v1.SetSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SetSessionRequest;
  return proto.supabase.v1.SetSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SetSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SetSessionRequest}
 */
proto.supabase.v1.SetSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SetSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SetSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SetSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string refreshToken = 1;
 * @return {string}
 */
proto.supabase.v1.SetSessionRequest.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.SetSessionRequest} returns this
 */
proto.supabase.v1.SetSessionRequest.prototype.setRefreshtoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.SetSessionResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.SetSessionResponse.SetsessionOneOfCase = {
  SETSESSION_ONE_OF_NOT_SET: 0,
  SESSION: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.SetSessionResponse.SetsessionOneOfCase}
 */
proto.supabase.v1.SetSessionResponse.prototype.getSetsessionOneOfCase = function() {
  return /** @type {proto.supabase.v1.SetSessionResponse.SetsessionOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.SetSessionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SetSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SetSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SetSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SetSessionResponse}
 */
proto.supabase.v1.SetSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SetSessionResponse;
  return proto.supabase.v1.SetSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SetSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SetSessionResponse}
 */
proto.supabase.v1.SetSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SetSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SetSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SetSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.SetSessionResponse.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 1));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.SetSessionResponse} returns this
*/
proto.supabase.v1.SetSessionResponse.prototype.setSession = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.SetSessionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SetSessionResponse} returns this
 */
proto.supabase.v1.SetSessionResponse.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SetSessionResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.SetSessionResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.SetSessionResponse} returns this
*/
proto.supabase.v1.SetSessionResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.SetSessionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SetSessionResponse} returns this
 */
proto.supabase.v1.SetSessionResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SetSessionResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SetAuthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SetAuthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SetAuthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetAuthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SetAuthRequest}
 */
proto.supabase.v1.SetAuthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SetAuthRequest;
  return proto.supabase.v1.SetAuthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SetAuthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SetAuthRequest}
 */
proto.supabase.v1.SetAuthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SetAuthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SetAuthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SetAuthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetAuthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string refreshToken = 1;
 * @return {string}
 */
proto.supabase.v1.SetAuthRequest.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.SetAuthRequest} returns this
 */
proto.supabase.v1.SetAuthRequest.prototype.setRefreshtoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.SetAuthResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.SetAuthResponse.SetauthOneOfCase = {
  SETAUTH_ONE_OF_NOT_SET: 0,
  SESSION: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.SetAuthResponse.SetauthOneOfCase}
 */
proto.supabase.v1.SetAuthResponse.prototype.getSetauthOneOfCase = function() {
  return /** @type {proto.supabase.v1.SetAuthResponse.SetauthOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.SetAuthResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SetAuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SetAuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SetAuthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetAuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SetAuthResponse}
 */
proto.supabase.v1.SetAuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SetAuthResponse;
  return proto.supabase.v1.SetAuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SetAuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SetAuthResponse}
 */
proto.supabase.v1.SetAuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SetAuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SetAuthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SetAuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SetAuthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.SetAuthResponse.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 1));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.SetAuthResponse} returns this
*/
proto.supabase.v1.SetAuthResponse.prototype.setSession = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.SetAuthResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SetAuthResponse} returns this
 */
proto.supabase.v1.SetAuthResponse.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SetAuthResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.SetAuthResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.SetAuthResponse} returns this
*/
proto.supabase.v1.SetAuthResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.SetAuthResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SetAuthResponse} returns this
 */
proto.supabase.v1.SetAuthResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SetAuthResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.GetSessionFromUrlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.GetSessionFromUrlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.GetSessionFromUrlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.GetSessionFromUrlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.GetSessionFromUrlRequest}
 */
proto.supabase.v1.GetSessionFromUrlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.GetSessionFromUrlRequest;
  return proto.supabase.v1.GetSessionFromUrlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.GetSessionFromUrlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.GetSessionFromUrlRequest}
 */
proto.supabase.v1.GetSessionFromUrlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.GetSessionFromUrlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.GetSessionFromUrlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.GetSessionFromUrlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.GetSessionFromUrlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.GetSessionFromUrlRequest.Options.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.GetSessionFromUrlRequest.Options} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.toObject = function(includeInstance, msg) {
  var f, obj = {
    storesession: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.GetSessionFromUrlRequest.Options}
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.GetSessionFromUrlRequest.Options;
  return proto.supabase.v1.GetSessionFromUrlRequest.Options.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.GetSessionFromUrlRequest.Options} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.GetSessionFromUrlRequest.Options}
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStoresession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.GetSessionFromUrlRequest.Options.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.GetSessionFromUrlRequest.Options} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoresession();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool storeSession = 1;
 * @return {boolean}
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.prototype.getStoresession = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.supabase.v1.GetSessionFromUrlRequest.Options} returns this
 */
proto.supabase.v1.GetSessionFromUrlRequest.Options.prototype.setStoresession = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.GetSessionFromUrlResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.GetSessionFromUrlResponse.GetsessionfromurlOneOfCase = {
  GETSESSIONFROMURL_ONE_OF_NOT_SET: 0,
  SESSION: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.GetSessionFromUrlResponse.GetsessionfromurlOneOfCase}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.getGetsessionfromurlOneOfCase = function() {
  return /** @type {proto.supabase.v1.GetSessionFromUrlResponse.GetsessionfromurlOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.GetSessionFromUrlResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.GetSessionFromUrlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.GetSessionFromUrlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.GetSessionFromUrlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.GetSessionFromUrlResponse}
 */
proto.supabase.v1.GetSessionFromUrlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.GetSessionFromUrlResponse;
  return proto.supabase.v1.GetSessionFromUrlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.GetSessionFromUrlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.GetSessionFromUrlResponse}
 */
proto.supabase.v1.GetSessionFromUrlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.GetSessionFromUrlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.GetSessionFromUrlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.GetSessionFromUrlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 1));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.GetSessionFromUrlResponse} returns this
*/
proto.supabase.v1.GetSessionFromUrlResponse.prototype.setSession = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.GetSessionFromUrlResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.GetSessionFromUrlResponse} returns this
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.GetSessionFromUrlResponse} returns this
*/
proto.supabase.v1.GetSessionFromUrlResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.GetSessionFromUrlResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.GetSessionFromUrlResponse} returns this
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.GetSessionFromUrlResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supabase.v1.SubscriveAuthResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supabase.v1.SubscriveAuthResponse.SubscriveauthOneOfCase = {
  SUBSCRIVEAUTH_ONE_OF_NOT_SET: 0,
  DATA: 1,
  ERROR: 2
};

/**
 * @return {proto.supabase.v1.SubscriveAuthResponse.SubscriveauthOneOfCase}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.getSubscriveauthOneOfCase = function() {
  return /** @type {proto.supabase.v1.SubscriveAuthResponse.SubscriveauthOneOfCase} */(jspb.Message.computeOneofCase(this, proto.supabase.v1.SubscriveAuthResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SubscriveAuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SubscriveAuthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SubscriveAuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.supabase.v1.SubscriveAuthData.toObject(includeInstance, f),
    error: (f = msg.getError()) && Common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SubscriveAuthResponse}
 */
proto.supabase.v1.SubscriveAuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SubscriveAuthResponse;
  return proto.supabase.v1.SubscriveAuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SubscriveAuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SubscriveAuthResponse}
 */
proto.supabase.v1.SubscriveAuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supabase.v1.SubscriveAuthData;
      reader.readMessage(value,proto.supabase.v1.SubscriveAuthData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new Common_pb.Error;
      reader.readMessage(value,Common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SubscriveAuthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SubscriveAuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SubscriveAuthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.supabase.v1.SubscriveAuthData.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscriveAuthData data = 1;
 * @return {?proto.supabase.v1.SubscriveAuthData}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.getData = function() {
  return /** @type{?proto.supabase.v1.SubscriveAuthData} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.SubscriveAuthData, 1));
};


/**
 * @param {?proto.supabase.v1.SubscriveAuthData|undefined} value
 * @return {!proto.supabase.v1.SubscriveAuthResponse} returns this
*/
proto.supabase.v1.SubscriveAuthResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.supabase.v1.SubscriveAuthResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SubscriveAuthResponse} returns this
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.supabase.v1.Error}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.getError = function() {
  return /** @type{?proto.supabase.v1.Error} */ (
    jspb.Message.getWrapperField(this, Common_pb.Error, 2));
};


/**
 * @param {?proto.supabase.v1.Error|undefined} value
 * @return {!proto.supabase.v1.SubscriveAuthResponse} returns this
*/
proto.supabase.v1.SubscriveAuthResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.supabase.v1.SubscriveAuthResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SubscriveAuthResponse} returns this
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SubscriveAuthResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supabase.v1.SubscriveAuthData.prototype.toObject = function(opt_includeInstance) {
  return proto.supabase.v1.SubscriveAuthData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supabase.v1.SubscriveAuthData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SubscriveAuthData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    event: jspb.Message.getFieldWithDefault(msg, 2, 0),
    session: (f = msg.getSession()) && proto.supabase.v1.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supabase.v1.SubscriveAuthData}
 */
proto.supabase.v1.SubscriveAuthData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supabase.v1.SubscriveAuthData;
  return proto.supabase.v1.SubscriveAuthData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supabase.v1.SubscriveAuthData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supabase.v1.SubscriveAuthData}
 */
proto.supabase.v1.SubscriveAuthData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.supabase.v1.AUTH_EVENT_TYPE} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 3:
      var value = new proto.supabase.v1.Session;
      reader.readMessage(value,proto.supabase.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supabase.v1.SubscriveAuthData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supabase.v1.SubscriveAuthData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supabase.v1.SubscriveAuthData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supabase.v1.SubscriveAuthData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.supabase.v1.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.supabase.v1.SubscriveAuthData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.supabase.v1.SubscriveAuthData} returns this
 */
proto.supabase.v1.SubscriveAuthData.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AUTH_EVENT_TYPE event = 2;
 * @return {!proto.supabase.v1.AUTH_EVENT_TYPE}
 */
proto.supabase.v1.SubscriveAuthData.prototype.getEvent = function() {
  return /** @type {!proto.supabase.v1.AUTH_EVENT_TYPE} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.supabase.v1.AUTH_EVENT_TYPE} value
 * @return {!proto.supabase.v1.SubscriveAuthData} returns this
 */
proto.supabase.v1.SubscriveAuthData.prototype.setEvent = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Session Session = 3;
 * @return {?proto.supabase.v1.Session}
 */
proto.supabase.v1.SubscriveAuthData.prototype.getSession = function() {
  return /** @type{?proto.supabase.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.supabase.v1.Session, 3));
};


/**
 * @param {?proto.supabase.v1.Session|undefined} value
 * @return {!proto.supabase.v1.SubscriveAuthData} returns this
*/
proto.supabase.v1.SubscriveAuthData.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.supabase.v1.SubscriveAuthData} returns this
 */
proto.supabase.v1.SubscriveAuthData.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supabase.v1.SubscriveAuthData.prototype.hasSession = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.supabase.v1);
